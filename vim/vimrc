set encoding=utf-8
set nocompatible                  " Must come first because it changes other options.
set background=dark

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
" turn off search highlight"
nnoremap <leader><space> :nohlsearch<CR>

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title
set lazyredraw                    " redraw only when we need to."
set showmatch                     " highlight matching [{()}]"

if !has("gui_running")            " Don't set titleold
set titleold=
if &term == "xterm" && &t_ts == ""
  let &t_ts = "\e]2;"
endif
if &t_ts != ""
  set title titlestring=%t%m\ -\ VIM
endif
endif

set visualbell                        " No beeping.

set nobackup                          " Don't make a backup before overwriting a file.
set nowritebackup                     " And again.
set directory=$HOME/.vim-tmp/tmp      " Keep swap files in one location
set backupdir=$HOME/.vim-tmp/_backup  " where to put backup files.

set tabstop=2                         " Global tab width.
set shiftwidth=2                      " And again, related.
set expandtab                         " Use spaces instead of tabs
set laststatus=2                      " Show the status line all the time
set listchars=tab:▸\ ,eol:¬
"set list                             " Show invisible characters
"set cursorline                       " Show cursor line.

source ~/.vim/vimrc/neobundle.vim

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.scssc,*.sassc

" set autoread                     " Update open files when changed externally

" Or use vividchalk
set t_Co=256
colorscheme vividchalk
highlight clear SignColumn

" Only do this part when compiled with support for autocommands
if has("autocmd")
" Enable file type detection
filetype on
" Syntax of these languages is fussy over tabs Vs spaces
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
" Customisations based on house-style (arbitrary)
autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
" Treat .rss files as XML
autocmd BufNewFile,BufRead *.rss setfiletype xml
" Remove trailing whitespaces
autocmd BufWritePre * :%s/\s\+$//e
autocmd BufNewFile,BufRead *.json set ft=javascript
autocmd BufNewFile,BufRead *.eco set ft=html
endif

let mapleader=","
if exists(":Tabularize")
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" Improve CtrlP
let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"
let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps
if has("unix")
let my_ctrlp_user_command = "" .
      \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
      \ ctrlp_filter_greps
endif
let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

map <leader>gg :e Gemfile<cr>
"map <leader>gr :e config/routes.rb<cr>
"map <leader>db :e config/database.yml<cr>
map <leader>f :CtrlP .<cr>

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :e %%
map <leader>sp :sp %%
map <leader>vsp :vsp %%

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Aliases for some typos
command WQ wq
command Wq wq
command W w
command Q q

" disable arroy keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim/

" Use poweline fonts in airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ' ' " No >
let g:airline_right_sep = ' ' " No <
let g:airline_detect_modified = 1 " enable modified detection
let g:airline_detect_paste = 1 " enable paste detection
" airline-branch : fugitive.vim
let g:airline#extensions#branch#enabled = 1
" airline-hunks : vim-signify or vim-gitgutter
let g:airline#extensions#hunks#enabled = 1
" airline-tabline : Top buffer bar
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#tab_nr_type = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s '
let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#fnamecollapse = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#tab_min_count = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

" Override some sections
" let spc = ' '
" let g:airline_section_a = airline#section#create_left(['mode', 'paste', 'iminsert'])
" let g:airline_section_b = airline#section#create(['hunks', 'branch'])
" let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly'])
" let g:airline_section_gutter = airline#section#create(['%='])
let g:airline_section_x = '' " airline#section#create_right(['tagbar', 'filetype'])
let g:airline_section_y = '' " airline#section#create_right(['ffenc'])
" let g:airline_section_z = airline#section#create(['%3p%%'.spc, 'linenr', ':%3c '])
" let g:airline_section_warning = airline#section#create(['syntastic', 'eclim', 'whitespace'])

" INSERT to NORMAL timeout
set ttimeoutlen=50

" Don't autosave/load sessions
let g:session_autosave = 'no'
let g:session_autoload = 'no'

" vim-rspec mappings
let g:rspec_command = "!bundle exec rspec {spec}"
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>
nnoremap <Leader>a :call RunAllSpecs()<CR>

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Don't print bufferline bar
let g:bufferline_echo = 0

" Remove trailing newline
"au BufWritePre * :set binary | set noeol
"au BufWritePost * :set nobinary | set eol

" SplitJoin plugin
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

" Store notes on Documents by default
let g:notes_directories = ['~/Documents/Notes']

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" Create non-existent dirs on file save
augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir)
          \   && (a:force
          \       || input("'" . a:dir . "' does not exist. Create? [y/N]") =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END

" vim-markdown
let g:vim_markdown_folding_disabled=1

" reload vim config
nnoremap <Leader>r :so $MYVIMRC<CR>

" support ack 1.x
let g:ack_default_options=" -H --nocolor --nogroup --column"

" disable go autoinstall
let g:go_disable_autoinstall = 1

" enable undo history
set undofile
set undodir=~/.vim-tmp/undodir
